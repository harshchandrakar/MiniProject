pipeline {
    agent any
    triggers { 
        githubPush() 
    }
    environment {
        DOCKER_IMAGE_NAME = 'calculator'
        GITHUB_REPO_URL = 'https://github.com/harshchandrakar/MiniProject.git'
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    // Checkout the code from the GitHub repository
                    git branch: 'main', url: "${GITHUB_REPO_URL}"
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Build Docker image
                    docker.build("${DOCKER_IMAGE_NAME}", '.')
                }
            }
        }

        stage('Push Docker Images') {
            steps {
                script {
                    docker.withRegistry('', 'DockerHubCred') {
                        sh 'docker tag calculator iiitb/calculator:latest'
                        sh 'docker push iiitb/calculator'
                    }
                }
            }
        }

        stage('Run Ansible Playbook') {
            steps {
                withCredentials([sshUserPrivateKey(credentialsId: 'bd971806-ba26-4df8-afad-00f96eb69b98', 
                                                   keyFileVariable: 'SSH_KEY_FILE', 
                                                   usernameVariable: 'SSH_USER')]) {
                    script {
                        // Dynamically create the inventory file
                        writeFile file: 'hosts', text: """
                        localhost ansible_user=${SSH_USER} ansible_ssh_private_key_file=${SSH_KEY_FILE}
                        ansible_ssh_common_args='-o StrictHostKeyChecking=no'
                        """
                        
                        // Run Ansible Playbook
                        ansiblePlaybook(
                            playbook: 'deploy.yml',
                            inventory: 'inventory'
                        )
                    }
                }
            }
        }
    }
}
